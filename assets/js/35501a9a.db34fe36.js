"use strict";(self.webpackChunkmy_trip=self.webpackChunkmy_trip||[]).push([[7391],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(f,l(l({ref:n},c),{},{components:t})):a.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},l="Propiedades de los items",s={unversionedId:"WEB/css/flexbox/propiedades_items",id:"WEB/css/flexbox/propiedades_items",title:"Propiedades de los items",description:"flex",source:"@site/docs/WEB/css/18_flexbox/04_propiedades_items.md",sourceDirName:"WEB/css/18_flexbox",slug:"/WEB/css/flexbox/propiedades_items",permalink:"/mytrip/docs/WEB/css/flexbox/propiedades_items",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"CSS",previous:{title:"Alineamiento",permalink:"/mytrip/docs/WEB/css/flexbox/alineamiento"},next:{title:"Fundamentos Grid",permalink:"/mytrip/docs/WEB/css/grid/fundamentos"}},i={},p=[],c={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"propiedades-de-los-items"},"Propiedades de los items"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"flex"),": es un shorthand que engloba las sigientes propiedades:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flex-grow"),": Establece que hacer cuando hay espacios sobrante. cuantas divisiones coge el elemento. el valor es un entero desde 0 hasta n o auto.")),(0,r.kt)("p",null,"Ejemplo: "),(0,r.kt)("p",null,"para entender lo que hace si tenemos 4 cajas de 50px y un contenedor de 400px sabemos que las 4 cajas ocuparan 200px y le estamos indicando que la parte sobrante la divida en la suma de los valores de ",(0,r.kt)("strong",{parentName:"p"},"flex-grow")," que existan. en este caso 3 y que se le de el valor de esa divicion multiplicado por el valor del flex-grow que contiene el item en este caso uno a la segunda caja y dos a la tercera caja."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},".flex-container{\n    display:flex;\n    width:400px;\n}\n\n.flex-item{\n    width:50px;\n    height:50px;\n}\n\n.flex-item:nth-child(2){\n    flex-grow:1;\n}\n\n.flex-item:nth-child(3){\n    flex-grow:2;\n}\n\n/**para entender lo que hace  */\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flex-shrink")," establece que hacer cuando no hay espacio suficiente. cuantas divisiones pierde el elemento. el valor es un entero desde 0 hasta n.")),(0,r.kt)("p",null,"Ejemplo:"),(0,r.kt)("p",null,"este hace un calculo de cuantos pixeles tiene que entregar cada elemento si por ejemplo se tienen 4 cajas de 200px en un contenedor de 400px cada una debe perder 100px, pero al darle un flex-shrink:2 a alguna caja le indicamos que pierda una cantidad mayor en si creamos virtualmente mas elementos en este caso ya no tendriamos 4 elementos sino 5 y al realizar la divicion vemos que a cada elemento le tocan perder 80px y al elemento que le dimos flex-shrink le tocaria perder 80px de el y 80px del elemento virtual. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"flex-basis"),": Establece cuanto tiene que ocupar el item antes de encojer o extenderse. flex basis prevalece ante width si el main-axis es horizontal o ante height si el main-axis es vertical. el valor es un entero desde 0 hasta n.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"flex-item{\n    flex-basis:200px;\n}\n")),(0,r.kt)("p",null,"los valores de flex son: lo ideal es usar el flex por rendimiento y va flex-grow flex-shrink flex-basis. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"por defecto es: 0 1 auto;"),(0,r.kt)("li",{parentName:"ul"},"auto: 1 1 auto;"),(0,r.kt)("li",{parentName:"ul"},"none: 0 0 auto;")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Order"),": establece que orden ocupara el elemento en el contenedor flex. el valor es el peso respecto a los valores que tengan los otros elementos. por defecto es 0. funciona similar a ",(0,r.kt)("strong",{parentName:"p"},"z-index")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"flex-item:nth-child(1){\n    order:1;\n}\nflex-item:nth-child(2){\n    order:2;\n}\nflex-item:nth-child(3){\n    order:1;\n}\n")))}d.isMDXComponent=!0}}]);