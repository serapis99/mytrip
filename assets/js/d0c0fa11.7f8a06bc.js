"use strict";(self.webpackChunkmy_trip=self.webpackChunkmy_trip||[]).push([[5267],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>d});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return n?t.createElement(b,o(o({ref:a},u),{},{components:n})):t.createElement(b,o({ref:a},u))}));function d(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,a,n)=>{n.d(a,{Z:()=>o});var t=n(7294),r=n(6010);const l="tabItem_Ymn6";function o(e){let{children:a,hidden:n,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},a)}},5488:(e,a,n)=>{n.d(a,{Z:()=>d});var t=n(7462),r=n(7294),l=n(6010),o=n(2389),i=n(7392),s=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){var a;const{lazy:n,block:o,defaultValue:m,values:d,groupId:b,className:v}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??g.map((e=>{let{props:{value:a,label:n,attributes:t}}=e;return{value:a,label:n,attributes:t}})),y=(0,i.l)(k,((e,a)=>e.value===a.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(a=g.find((e=>e.props.default)))?void 0:a.props.value)??g[0].props.value;if(null!==f&&!k.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:h}=(0,s.U)(),[T,x]=(0,r.useState)(f),C=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=b){const e=N[b];null!=e&&e!==T&&k.some((a=>a.value===e))&&x(e)}const O=e=>{const a=e.currentTarget,n=C.indexOf(a),t=k[n].value;t!==T&&(E(a),x(t),null!=b&&h(b,String(t)))},I=e=>{var a;let n=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const a=C.indexOf(e.currentTarget)+1;n=C[a]??C[0];break}case"ArrowLeft":{const a=C.indexOf(e.currentTarget)-1;n=C[a]??C[C.length-1];break}}null==(a=n)||a.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},v)},k.map((e=>{let{value:a,label:n,attributes:o}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>C.push(e),onKeyDown:I,onClick:O},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===a})}),n??a)}))),n?(0,r.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function d(e){const a=(0,o.Z)();return r.createElement(m,(0,t.Z)({key:String(a)},e))}},3214:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var t=n(7462),r=(n(7294),n(3905)),l=n(5488),o=n(5162);const i={},s="Declaracion de variables, Constantes y Comentarios",c={unversionedId:"Programacion/Basico/Sintasis basica/declaracion",id:"Programacion/Basico/Sintasis basica/declaracion",title:"Declaracion de variables, Constantes y Comentarios",description:"",source:"@site/docs/Programacion/Basico/03_Sintasis basica/04_declaracion.md",sourceDirName:"Programacion/Basico/03_Sintasis basica",slug:"/Programacion/Basico/Sintasis basica/declaracion",permalink:"/mytrip/docs/Programacion/Basico/Sintasis basica/declaracion",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"ProgramacionBasica",previous:{title:"Nomenclatura",permalink:"/mytrip/docs/Programacion/Basico/Sintasis basica/nombreClatura"},next:{title:"Operadores aritmeticos",permalink:"/mytrip/docs/Programacion/Basico/Sintasis basica/Operadores/aritmeticos"}},u={},p=[{value:"Constantes",id:"constantes",level:2},{value:"comentarios",id:"comentarios",level:2}],m={toc:p};function d(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"declaracion-de-variables-constantes-y-comentarios"},"Declaracion de variables, Constantes y Comentarios"),(0,r.kt)("p",null,"Algo que debemos aprender es a como se da la instruccion de almacenar un valor en una variable o constante."),(0,r.kt)("h1",{id:"variables"},"Variables"),(0,r.kt)(l.Z,{groupId:"lenguaje",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"En java se declara una variable indicando primero el tipo de la variable y luego el nombre de la variable que queramos, tambien permite la creacion de multiples variables del mismo tipo en una linea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// declarar e igualar en diferentes lineas\nbyte variable1;\nvariable1=16;\n\n// declarar e igualar en una linea\nString variable2="Ruben"\n\n// declarar multiples variables\nint variable1,variable2=16,variable3=4;\n'))),(0,r.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("p",null,"En C# se declara una variable indicando primero el tipo de la variable y luego el nombre de la variable que queramos, tambien permite la creacion de multiples variables del mismo tipo en una linea."),(0,r.kt)("p",null,"En C# se permite crear variables que se le asignan el tipo al momento de ejecucion para esto usamos la palabra clave ",(0,r.kt)("strong",{parentName:"p"},"var")," aunque una vez que se le da el tipo no se puede modificar en el resto del programa."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// declarar e igualar en diferentes lineas\nbyte variable1;\nvariable1=16;\n\n// declarar e igualar en una linea\nString variable2="Ruben"\n\n// declarar multiples variables\nint variable1,variable2=16,variable3=4;\n\n//uso de la palabra clave var\nvar variable1=3;\n'))),(0,r.kt)(o.Z,{value:"vb",label:"VB",mdxType:"TabItem"},(0,r.kt)("p",null,"En visual basic tenemos que indicarle que queremos crear una variable con la palabra reservada ",(0,r.kt)("inlineCode",{parentName:"p"},"Dim")," con eso le indicamos a VB que crearemos una variable "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-visual-basic"},"' declaracion de variables y asignarle un valor\nDim edad As Integer = 32\nDim letra As Char ='R'\nDim nommbre As String=\"ruben\"\nDim condicion As Boolean = True\n\n' declarar una variable sin asignar datos\nDim estatura As Double\n\n' delcarar multiples variables aunque no se pueden asignar\nDim nota1, nota2, nota3 As Byte\n"))),(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("p",null,"En C++ se declara una variable indicando primero el tipo de la variable y luego el nombre de la variable que queramos, tambien permite la creacion de multiples variables del mismo tipo en una linea."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// creacion de variables y asignacion\nunsigned short edad=15;\nint salario=1598798;\n\n// creacion de variables en una linea\nunsigned short edad,estatura=15;\n\n// declaracion de variable tipo constructor\nunsigned short edad(12);\n\n//declaracion de variable tipo lista\nunsigned short estatura{15};\n")),(0,r.kt)("admonition",{title:"Nota",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Declaracion tipo constructor:"),(0,r.kt)("li",{parentName:"ul"},"Declaracion tipo lista: se creo para evitar la perdida de presicion cuando se cambia de tipo tambien llamado narrowing")))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("p",null,"python tiene la capacidad de darle el tipo a la variable dependiendo el valor que guarda en su interior si es de tipo numerico lo guarda como ",(0,r.kt)("strong",{parentName:"p"},"int")," si es de tipo flotante lo guarda como ",(0,r.kt)("strong",{parentName:"p"},"float"),", si es de tipo string lo guarda como ",(0,r.kt)("strong",{parentName:"p"},"str")," y si contiene true o false sera tratada como ",(0,r.kt)("strong",{parentName:"p"},"bool")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"variable=15\n"))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"")))),(0,r.kt)("h2",{id:"constantes"},"Constantes"),(0,r.kt)(l.Z,{groupId:"lenguaje",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"En java se crean constantes usando la palabra clave ",(0,r.kt)("strong",{parentName:"p"},"final")," antes del tipo de la variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"final byte edad=16;\n"))),(0,r.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("p",null,"por convencion el nombre de las constantes van en mayusculas y se declaran usando la palabra clave ",(0,r.kt)("strong",{parentName:"p"},"const")," seguido del tipo de variable se debe asignar el valor en el mismo momento que se declara."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"const int IVA = 16;\n"))),(0,r.kt)(o.Z,{value:"vb",label:"VB",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-visual-basic"},""))),(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("p",null,"En c++ tenemos dos formas de declarar variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// forma aconsejada \nconst double iva=0.20;\n\n// forma obsoleta ya que se declara una expresion\n#define iva 0.20;\n"))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("p",null,"En python no existen las constantes lo unico que se hace como nomenclatura es nombrarla toda en mayuscula."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"CONSTANTE=3.1416\n"))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"")))),(0,r.kt)("h2",{id:"comentarios"},"comentarios"),(0,r.kt)(l.Z,{groupId:"lenguaje",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("p",null,"En Java tenemos dos tipos de comentario el de una linea que solo inicia con dos slash ",(0,r.kt)("strong",{parentName:"p"},"//")," o de varias lineas donde se inicia con slash asterisco ",(0,r.kt)("strong",{parentName:"p"},"/","*")," y termina con asterisco slash ",(0,r.kt)("strong",{parentName:"p"},"*","\\")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"//comentario de una linea\n\n/* \ncomentario de \nvarias lineas\n*/\n"))),(0,r.kt)(o.Z,{value:"csharp",label:"C#",mdxType:"TabItem"},(0,r.kt)("p",null,"En C# tenemos dos tipos de comentario el de una linea que solo inicia con dos slash ",(0,r.kt)("strong",{parentName:"p"},"//")," o de varias lineas donde se inicia con slash asterisco ",(0,r.kt)("strong",{parentName:"p"},"/","*")," y termina con asterisco slash ",(0,r.kt)("strong",{parentName:"p"},"*","\\")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"//comentario de una linea\n\n/* \ncomentario de \nvarias lineas\n*/\n"))),(0,r.kt)(o.Z,{value:"vb",label:"VB",mdxType:"TabItem"},(0,r.kt)("p",null,"En visual Basic solo se tiene un tipo de comentario de una linea y se usa comilla simple o ",(0,r.kt)("inlineCode",{parentName:"p"},"alt"),"+",(0,r.kt)("inlineCode",{parentName:"p"},"39")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-visual-basic"},"'hola esto es un comentario\n"))),(0,r.kt)(o.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"\n//comentario de una linea\n\n/* \ncomentario de \nvarias lineas\n*/\n\n"))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# comentarios de una linea\n\n\n"""\nComentarios de varias lineas \ntambien funcionan como documentacion \ndel codigo\n"""\n'))),(0,r.kt)(o.Z,{value:"go",label:"Go",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"//comentario de una linea\n\n/* \ncomentario de \nvarias lineas\n*/\n")))))}d.isMDXComponent=!0}}]);